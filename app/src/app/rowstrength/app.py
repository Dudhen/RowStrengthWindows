import sys
import re
import json
from importlib import resources
import toga
from toga.style import Pack
from toga.style.pack import COLUMN, ROW

# ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------
DISTANCES = [500, 1000, 1500, 2000, 2500, 3000, 4000, 5000, 6000, 8000, 10000]
GENDERS_UI = {"–∂": "female", "–º": "male"}
EXERCISES_UI_TO_KEY = {"–∂–∏–º": "bench-press", "–ø—Ä–∏—Å–µ–¥": "squat", "—Ç—è–≥–∞": "deadlift"}
EXERCISES_KEY_TO_RU = {"bench-press": "–∂–∏–º–µ", "squat": "–ø—Ä–∏—Å–µ–¥–µ", "deadlift": "—Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–µ"}
MODE_CHOICES = ["–≠—Ä–≥–æ–º–µ—Ç—Ä", "–®—Ç–∞–Ω–≥–∞"]

REPS_TABLE = {
    1: 100, 2: 97, 3: 94, 4: 92, 5: 89, 6: 86, 7: 83, 8: 81, 9: 78, 10: 75,
    11: 73, 12: 71, 13: 70, 14: 68, 15: 67, 16: 65, 17: 64, 18: 63, 19: 61,
    20: 60, 21: 59, 22: 58, 23: 57, 24: 56, 25: 55, 26: 54, 27: 53, 28: 52,
    29: 51, 30: 50
}

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞)
WINDOW_SIZE = (1000, 600)

# ---------- –°—Ç–∏–ª–∏ ----------
IS_IOS = (sys.platform == "ios")
F_HEAD = 22 if IS_IOS else 18
F_LABEL = 16 if IS_IOS else 14
F_INPUT = 16 if IS_IOS else 14
PAD_MAIN = 18 if IS_IOS else 14
GAP_MAIN = 14 if IS_IOS else 10

S_MAIN = Pack(direction=COLUMN, margin=PAD_MAIN, gap=GAP_MAIN)
S_ROW = Pack(direction=ROW, gap=10, margin_bottom=6)
S_HEAD = Pack(font_size=F_HEAD, margin_bottom=6)
S_LABEL = Pack(font_size=F_LABEL, margin_right=8)
S_INPUT = Pack(font_size=F_INPUT)
S_BTN = Pack(margin_top=6, margin_bottom=6)
S_OUT = Pack(height=140, font_size=F_INPUT, margin_top=4)


# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def get_split_500m(distance: str, time: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Å–ø–ª–∏—Ç –Ω–∞ 500 –º –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'MM:SS.t/500–º'.
    distance ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2000' –∏–ª–∏ '2000m').
    time ‚Äî —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'MM:SS' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '06:10').

    –ü—Ä–∏–º–µ—Ä:
        get_split_500m("2000", "06:10") -> '01:32.5/500–º'
    """
    # 1) –ü–∞—Ä—Å–∏–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é (–±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ —Ü–∏—Ñ—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏)
    m = re.search(r'\d+', distance)
    if not m:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è")
    meters = int(m.group())
    if meters <= 0:
        raise ValueError("–î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")

    # 2) –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è MM:SS
    m = re.fullmatch(r'\s*(\d{1,2}):(\d{2})\s*', time)
    if not m:
        raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM:SS")
    mm, ss = int(m.group(1)), int(m.group(2))
    if ss >= 60:
        raise ValueError("–°–µ–∫—É–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å < 60")

    total_sec = mm * 60 + ss

    # 3) –°—á–∏—Ç–∞–µ–º —Å–ø–ª–∏—Ç –≤ –¥–µ—Å—è—Ç—ã—Ö –¥–æ–ª—è—Ö —Å–µ–∫—É–Ω–¥—ã (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ float)
    # —Å–ø–ª–∏—Ç = –æ–±—â–µ–µ_–≤—Ä–µ–º—è / (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è/500)
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–∞–∑—É –≤ –¥–µ—Å—è—Ç—ã–µ –¥–æ–ª–∏ —Å–µ–∫—É–Ω–¥—ã (√ó10) –∏ –æ–∫—Ä—É–≥–ª—è–µ–º
    tenths_total = round(total_sec * 10 / (meters / 500))

    # 4) –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ MM:SS.t
    mins = tenths_total // 600                 # 600 –¥–µ—Å—è—Ç—ã—Ö –≤ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç–µ
    sec_tenths = tenths_total % 600
    secs = sec_tenths // 10
    tenth = sec_tenths % 10

    return f"{mins:02d}:{secs:02d}.{tenth}/500–º"


def load_json_from_package(filename: str):
    with resources.files(__package__).joinpath("data").joinpath(filename).open("r", encoding="utf-8") as f:
        return json.load(f)


def get_distance_data(i_gender, i_distance, rowing_data):
    return rowing_data.get(i_gender, {}).get(str(i_distance), {})


def get_strength_data(i_gender, i_weight, strength_data):
    return strength_data.get(i_gender, {}).get(str(i_weight), {})


def _parse_time_range_from_data(distance_data):
    times = []
    for k in distance_data.keys():
        m = re.match(r"^\s*(\d{1,2}):(\d{2})\s*$", k)
        if m:
            times.append((int(m.group(1)), int(m.group(2))))
    if not times:
        return (0, 0), (59, 59)
    min_mm = min(mm for mm, _ in times)
    max_mm = max(mm for mm, _ in times)
    min_ss = min(ss for mm, ss in times if mm == min_mm)
    max_ss = max(ss for mm, ss in times if mm == max_mm)
    return (min_mm, min_ss), (max_mm, max_ss)


def _two(n: int) -> str:
    return f"{n:02d}"


# ---------- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ----------
class RowStrengthApp(toga.App):
    def startup(self):
        # –î–∞–Ω–Ω—ã–µ
        self.rowing_data = load_json_from_package("data_for_rowing_app.json")
        self.strength_data_all = load_json_from_package("data_for_strength_app.json")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = toga.Label("RowStrength", style=S_HEAD)

        # –†–µ–∂–∏–º
        self.mode_widget = self._make_mode_widget()

        # –û–±—â–∏–µ –ø–æ–ª—è
        self.gender = toga.Selection(items=["–∂", "–º"], value="–º",
                                     on_change=self._on_gender_changed, style=S_INPUT)
        self.weight = toga.NumberInput(step=1, min=40, max=140, value=80, style=S_INPUT)

        # ----- –í–≤–æ–¥ ¬´–≠—Ä–≥–æ–º–µ—Ç—Ä¬ª
        self.distance = toga.Selection(items=[str(d) for d in DISTANCES], value="2000",
                                       on_change=self._on_distance_changed, style=S_INPUT)
        self.time_min = toga.Selection(items=["06"], value="06",
                                       on_change=self._on_time_min_changed, style=S_INPUT)
        self.time_sec = toga.Selection(items=[_two(i) for i in range(60)], value="00", style=S_INPUT)  # 01..59
        self.time_ms = toga.Selection(items=[str(i) for i in range(10)], value="0", style=S_INPUT)  # 00..99

        self.res1_title = toga.Label("‚è± –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è–º", style=S_LABEL)
        self.res1_output = toga.MultilineTextInput(readonly=True, style=S_OUT)
        self.res1_strength_title = toga.Label("üèãÔ∏è –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã –≤ —à—Ç–∞–Ω–≥–µ", style=S_LABEL)
        self.res1_output_strength = toga.MultilineTextInput(readonly=True, style=S_OUT)

        self.mode1_box = toga.Box(
            children=[
                toga.Label("–î–∏—Å—Ç–∞–Ω—Ü–∏—è:", style=S_LABEL), self.distance,
                toga.Label("–ú–∏–Ω:", style=S_LABEL), self.time_min,
                toga.Label("–°–µ–∫:", style=S_LABEL), self.time_sec,
                toga.Label("–°–æ—Ç—ã–µ:", style=S_LABEL), self.time_ms,
            ],
            style=S_ROW
        )
        self.mode1_results_box = toga.Box(
            children=[self.res1_title, self.res1_output, self.res1_strength_title, self.res1_output_strength],
            style=Pack(direction=COLUMN, gap=10, margin_top=4)
        )

        # ----- –í–≤–æ–¥ ¬´–®—Ç–∞–Ω–≥–∞¬ª
        self.exercise = toga.Selection(items=[i.capitalize() for i in list(EXERCISES_UI_TO_KEY.keys())],
                                       value="–ñ–∏–º", style=S_INPUT)
        self.bar_weight = toga.NumberInput(step=1, min=1, value=100, style=S_INPUT)
        self.reps = toga.NumberInput(step=1, min=1, max=30, value=5, style=S_INPUT)

        self.res2_title = toga.Label("üèãÔ∏è 1–ü–ú –∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç 2 –∫–º", style=S_LABEL)
        self.res2_output = toga.MultilineTextInput(readonly=True, style=S_OUT)

        self.mode2_box = toga.Box(
            children=[toga.Label("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", style=S_LABEL), self.exercise,
                      toga.Label("–í–µ—Å –Ω–∞ —à—Ç–∞–Ω–≥–µ (–∫–≥):", style=S_LABEL), self.bar_weight,
                      toga.Label("–ü–æ–≤—Ç–æ—Ä—ã:", style=S_LABEL), self.reps],
            style=S_ROW
        )
        self.mode2_results_box = toga.Box(
            children=[self.res2_title, self.res2_output],
            style=Pack(direction=COLUMN, gap=10, margin_top=4)
        )

        # ----- –°—Ç—ç–∫–∏, –∫—É–¥–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –Ω—É–∂–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.input_stack = toga.Box(style=Pack(direction=COLUMN, gap=8))
        self.results_stack = toga.Box(style=Pack(direction=COLUMN, gap=8))

        # –ö–Ω–æ–ø–∫–∞ ‚Äî —Ç–µ–ø–µ—Ä—å –°–†–ê–ó–£ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
        self.calc_button = toga.Button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", on_press=self.calculate, style=S_BTN)

        # –®–∞–ø–∫–∞
        head_row = toga.Box(children=[title], style=Pack(direction=ROW, margin_bottom=8))
        mode_row = toga.Box(children=[toga.Label("–†–µ–∂–∏–º:", style=S_LABEL), self.mode_widget], style=S_ROW)
        common_row = toga.Box(children=[toga.Label("–ü–æ–ª:", style=S_LABEL), self.gender,
                                        toga.Label("–í–µ—Å (–∫–≥):", style=S_LABEL), self.weight], style=S_ROW)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –≤–≤–æ–¥ ‚Üí –∫–Ω–æ–ø–∫–∞ ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        main_box = toga.Box(
            children=[head_row, mode_row, common_row, self.input_stack, self.calc_button, self.results_stack],
            style=S_MAIN
        )

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ (–Ω–∞ —Å–ª—É—á–∞–π –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤)
        scroller = toga.ScrollContainer(content=main_box)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω—É—Ç –ø–æ–¥ —Ç–µ–∫—É—â–∏–π –ø–æ–ª/–¥–∏—Å—Ç–∞–Ω—Ü–∏—é
        self._rebuild_time_selects()
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏ –ø–æ —Ä–µ–∂–∏–º—É
        self._set_mode_ui()

        # –û–∫–Ω–æ: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä + –∑–∞–ø—Ä–µ—Ç —Ä–µ—Å–∞–π–∑–∞
        self.main_window = toga.MainWindow(title=self.formal_name, size=WINDOW_SIZE)
        try:
            # –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            self.main_window.resizeable = False
        except Exception:
            try:
                self.main_window.resizable = False
            except Exception:
                pass

        self.main_window.content = scroller
        self.main_window.show()

    # ---- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã UI ----
    def _make_mode_widget(self):
        if IS_IOS and hasattr(toga, "SegmentedButton"):
            widget = toga.SegmentedButton(items=MODE_CHOICES, on_change=self._on_mode_changed)
            widget.value = MODE_CHOICES[0]
            return widget
        else:
            return toga.Selection(items=MODE_CHOICES, value=MODE_CHOICES[0],
                                  on_change=self._on_mode_changed, style=S_INPUT)

    def _get_mode_value(self) -> str:
        return self.mode_widget.value

    def _replace_children(self, box: toga.Box, new_children):
        for child in list(box.children):
            box.remove(child)
        for child in new_children:
            box.add(child)

    def _set_mode_ui(self):
        mode = self._get_mode_value()
        if mode == "–≠—Ä–≥–æ–º–µ—Ç—Ä":
            self._replace_children(self.input_stack, [self.mode1_box])
            self._replace_children(self.results_stack, [self.mode1_results_box])
        else:
            self._replace_children(self.input_stack, [self.mode2_box])
            self._replace_children(self.results_stack, [self.mode2_results_box])

    def _on_mode_changed(self, widget):
        self._set_mode_ui()

    def _on_distance_changed(self, widget):
        self._rebuild_time_selects()

    def _on_gender_changed(self, widget):
        self._rebuild_time_selects()

    def _on_time_min_changed(self, widget):
        pass  # —Å–µ–∫—É–Ω–¥—ã –≤—Å–µ–≥–¥–∞ 01..59

    def _rebuild_time_selects(self):
        """–ú–∏–Ω—É—Ç—ã ‚Äî –∏–∑ JSON –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª–∞/–¥–∏—Å—Ç–∞–Ω—Ü–∏–∏. –°–µ–∫—É–Ω–¥—ã ‚Äî 01..59."""
        try:
            g_key = GENDERS_UI[self.gender.value]
        except Exception:
            g_key = "male"
        distance = int(self.distance.value)

        distance_data = get_distance_data(g_key, distance, self.rowing_data)
        (min_mm, _), (max_mm, _) = _parse_time_range_from_data(distance_data)
        if not distance_data:
            min_mm, max_mm = 0, 59

        minutes_items = [_two(i) for i in range(min_mm, max_mm + 1)]
        prev_min = self.time_min.value if self.time_min.value in minutes_items else _two(min_mm)
        self.time_min.items = minutes_items
        self.time_min.value = prev_min

        sec_items = [_two(i) for i in range(60)]
        prev_sec = self.time_sec.value if self.time_sec.value in sec_items else "01"
        self.time_sec.items = sec_items
        self.time_sec.value = prev_sec

        if self.time_ms.value is None:
            self.time_ms.value = "00"

    # ---- –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ ----
    def calculate(self, widget):
        def _meters_from_key(k) -> int:
            m = re.search(r"\d+", str(k))
            return int(m.group()) if m else 0

        try:
            g_key = GENDERS_UI[self.gender.value]
            weight = int(self.weight.value)

            if self._get_mode_value() == "–≠—Ä–≥–æ–º–µ—Ç—Ä":
                distance = int(self.distance.value)
                distance_data = get_distance_data(g_key, distance, self.rowing_data)
                if not distance_data:
                    raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏/–ø–æ–ª—É")

                t_norm = f"{self.time_min.value}:{self.time_sec.value}"
                distance_data_time = distance_data.get(t_norm) or distance_data.get(t_norm.lstrip("0"))
                if not distance_data_time:
                    times_str = list(distance_data.keys())
                    raise ValueError(f"–í—Ä–µ–º—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ: –æ—Ç {times_str[0]} –¥–æ {times_str[-1]}")

                percent = distance_data_time.get("percent")
                strength = get_strength_data(g_key, weight, self.strength_data_all)
                if not strength:
                    raise ValueError("–ù–µ—Ç —Å–∏–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–µ—Å–∞")

                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è–º
                keys = [kk for kk in distance_data_time.keys() if kk != "percent"]
                keys.sort(key=_meters_from_key)
                lines_dist = []
                for k in keys:
                    v = distance_data_time[k]
                    meters = _meters_from_key(k)
                    lines_dist.append(f"{meters} –º ‚Äî {v}.00 ({get_split_500m(distance=str(meters), time=v)})")
                self.res1_output.value = "\n".join(lines_dist)

                # –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã –≤ —à—Ç–∞–Ω–≥–µ
                lines_str = []
                for ex_key, ex_label_ru in EXERCISES_KEY_TO_RU.items():
                    kilo = strength.get(ex_key, {}).get(percent)
                    if kilo == "1":
                        vmap = strength.get(ex_key, {})
                        kilo = round((float(kilo) + float(vmap.get("1"))) / 2, 2)
                    lines_str.append(f"{ex_label_ru.title()}: {kilo} –∫–≥")
                self.res1_output_strength.value = "\n".join(lines_str)

            else:
                ex_key = EXERCISES_UI_TO_KEY[self.exercise.value.lower()]
                bar_w = float(self.bar_weight.value)
                reps = int(self.reps.value)
                if reps not in REPS_TABLE:
                    raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø–æ–≤—Ç–æ—Ä—ã 1..30")

                rep_max = round((bar_w / REPS_TABLE[reps]) * 100, 2)

                strength_for_user = get_strength_data(g_key, weight, self.strength_data_all)
                if not strength_for_user:
                    raise ValueError("–ù–µ—Ç —Å–∏–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–µ—Å–∞")

                ex_table = strength_for_user.get(ex_key, {})
                i_percent = None
                for pct_str, val in ex_table.items():
                    if float(val) <= rep_max:
                        i_percent = float(pct_str)
                    else:
                        break
                if i_percent is None:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è 1–ü–ú")

                distance_data = get_distance_data(g_key, 2000, self.rowing_data)
                km2_res = None
                for k, v in distance_data.items():
                    km2_res = k
                    if float(v.get("percent")) < i_percent:
                        break

                self.res2_output.value = "\n".join([
                    f"–û—Ü–µ–Ω–∫–∞ 1–ü–ú: {rep_max} –∫–≥",
                    f"–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –Ω–∞ 2 –∫–º: {km2_res}"
                ])

        except Exception as e:
            try:
                exc_type, exc_obj, exc_tb = sys.exc_info()
                self.main_window.error_dialog("–û—à–∏–±–∫–∞", f"{str(e)}, line {exc_tb.tb_lineno}")
            except Exception:
                print("–û—à–∏–±–∫–∞:", e)


def main():
    return RowStrengthApp("RowStrength", "com.rowstrength")
